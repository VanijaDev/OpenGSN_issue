{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "domainSeparator",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "domainValue",
						"type": "bytes"
					}
				],
				"name": "DomainRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "typeHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "typeStr",
						"type": "string"
					}
				],
				"name": "RequestTypeRegistered",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "gas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "validUntil",
								"type": "uint256"
							}
						],
						"internalType": "struct IForwarder.ForwardRequest",
						"name": "forwardRequest",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "domainSeparator",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "requestTypeHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "suffixData",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "execute",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "ret",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					}
				],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					}
				],
				"name": "registerDomainSeparator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "typeName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "typeSuffix",
						"type": "string"
					}
				],
				"name": "registerRequestType",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "gas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "validUntil",
								"type": "uint256"
							}
						],
						"internalType": "struct IForwarder.ForwardRequest",
						"name": "forwardRequest",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "domainSeparator",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "requestTypeHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "suffixData",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "verify",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
					"params": {
						"domainSeparator": "- domain used when signing this request",
						"forwardRequest": "- all transaction parameters",
						"requestTypeHash": "- request type used when signing this request.",
						"signature": "- signature to validate. the transaction is verified, and then executed. the success and ret of \"call\" are returned. This method would revert only verification errors. target errors are reported using the returned \"success\" and ret string",
						"suffixData": "- the extension data used when signing this request."
					}
				},
				"registerDomainSeparator(string,string)": {
					"params": {
						"name": "the domain's display name",
						"version": "the domain/protocol version"
					}
				},
				"registerRequestType(string,string)": {
					"params": {
						"typeName": "- the name of the request type.",
						"typeSuffix": "- any extra data after the generic params.  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
					"notice": "execute a transaction"
				},
				"registerDomainSeparator(string,string)": {
					"notice": "Register a new domain separator. The domain separator must have the following fields: name,version,chainId, verifyingContract. the chainId is the current network's chainId, and the verifyingContract is this forwarder. This method is given the domain name and version to create and register the domain separator value."
				},
				"registerRequestType(string,string)": {
					"notice": "Register a new Request typehash."
				},
				"verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
					"notice": "verify the transaction would execute. validate the signature and the nonce of the request. revert if either signature or nonce are incorrect. also revert if domainSeparator or requestTypeHash are not registered."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MyGSN/IForwarder.sol": "IForwarder"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/MyGSN/IForwarder.sol": {
			"keccak256": "0xa0dd333c5542ec682be7a296af4ab8f795954ed3bb76dbf27b380aa7097114dc",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://bedafb4a774b87eee6387cf08ba863b49a021927d35004ab1e54b9b9ce834b82",
				"dweb:/ipfs/QmPAc6UxhSkTNbLQQCwHmRQPucqExtZzXf2Feazv2AG3uU"
			]
		}
	},
	"version": 1
}